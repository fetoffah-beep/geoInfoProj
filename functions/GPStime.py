# -*- coding: utf-8 -*-
"""
Created on Fri May 14 16:44:26 2021

@author: 39351
"""

import math
import rotationParam as rp
from functions.sat_orbit import SatelliteInfo
from datetime import date


class GPSTime():
    """     GPS Time computation    """
    def __init__( self, e, sqrtA, Ek, clockbias, clockdrift, clockdriftrate):

        gpsStartDay = date.toordinal(date(1980,1,6))+366

        # Number of days from beginning of GPS satrttime to the time of observation
        gpsDaysfromNavMsg = date.toordinal(date(yyyy, mm, dd))+366

        daysDifference = gpsDaysfromNavMsg - gpsStartDay

        # Number of weeks from the GPS start time to the week message was sent
        gpsWeekNumber = math.floor( daysDifference / 7)

        # In a particular week, get the day of the week
        gpsDayofWeek = math.floor( daysDifference - gpsWeekNumber * 7)

        # Convert the GPS day of week derived into seconds
        gpsSecondsOfWeek = ( gpsDayofWeek ) * 60 * 60 * 24

        # Update the GPS Seconds in the Week by adding the time from Nav message
        gpsSecondsOfWeek = gpsSecondsOfWeek + ( hh * 60 * 60 ) + ( mm * 60 ) + ss

        SatelliteInfo.transmission_time


        

        



        

        # Speed of light
        c = 2.99792458 * 10**8

        # Value of Earth's universal gravitational parameters
        miu = 3.986005 * 10 **14 #(m^3/s^2)

        # F is a constant
        F = -2 * math.sqrt(miu) / math.pow(c, 2) #(sec/sqrt(meter))

        # Relativistic effect
        # E_k is yet to be defined
        # delta_tr = F * rp.e * math.sqrt(rp.a) * math.sin(sat.Ek)
        

        (SatelliteInfo.transmission_time)








        # # a_f0 = SV Clock Bias Correction Coefficient
        # # a_f1 = SV Clock Drift Correction Coefficient
        # # a_f2 = Drift Rate Correction Coefficient
        # # the coefficients af0, af1 and af2 are generated by using GPS time
        # # t_oc is the clock data reference time in seconds
        # # SV PRN code phase offset
        # if ((GPStime - t_oc) > 302400):
        #     GPStime =  GPStime - 604800
        # elif ((t - t_oc) < -302400): 
        #     GPStime =  604800 + GPStime

        # delta_sv = sat.clockbias + sat.clockdrift * (GPStime - t_oc) + sat.clockdriftrate * math.pow((GPStime - t_oc), 2) + delta_tr

        # # t_sv is the effective SV PRN code phase time at message transmission time (seconds)
        # #delta_sv is the SV PRN code phase time offset (seconds)
        # # Unit of measure is seconds
        # GPStime = t_sv - delta_sv



        # # ------------------------
        # # https://gssc.esa.int/navipedia/index.php/Relativistic_Clock_Correction